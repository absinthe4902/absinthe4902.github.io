# 동작 파라미터화 코드 전달하기

그냥 chapter2에서는 동작 파라미터화 aka 함수 전달하기가 어떤 과정으로 진화가 되어왔나를 보여주고 있다. 함수 자체를 넘기는 이유는 이게 더 자잘하게 플래그 넘기는 것 보다 확장성이 있기 때문. 어쨌든 중요한 점은 시시각각 변하는 사용자 요구 사항에 비용이 가장 최소화 될 수 있는 것! 

발전단계: 플래그로 동작 분기 (최악) → 함수형 인터페이스 → 익명 클래스 → 람다

> 동작 파라미터화란 아직은 어떻게 실행할 것인지 결정하지 않은 코드 블록을 의미한다. 이 코드 블록은 나중에 프로그램에서 호출한다. (람다로 넘겨주게 된다)

## 1) 어떻게 필터링을 할 지 플래그를 추가해서 결정

```java
List<Apple> filterApples(List<Apple> apples, Color color, int weight, boolean flag) {

        List<Apple> result = new ArrayList<>();
        for(Apple apple : apples) {
            if((flag && apple.getColor().equals(color)) ||
                    (!flag && apple.getWeight() > weight)) {
                        result.add(apple);
            }
        }

        return result;
    }
```

실전에서는 이런 방법을 쓰면 안된다. 1) true와 flase가 뭘 의미하는지도 모르겠고 2)앞으로 필터링 요구 사항이 추가되면 확장을 하기도 정말 힘들다. 이렇게 얄팍하게 변수 하나로 분기를 하고 동작을 달리 하는 것보다 기본 동작은 똑같고 메인이 되는 (여기서는 필터링 조건 등등) 동작 자체를 다르게 하면 어떨까? → 동작 파라메터화

## 2) 함수형 인터페이스를 이용

요구 상황에 따라 출력을 해야 하는 정보가 다른 메서드가 있다. 아까와는 달리 값을 이해하기 어려운 플래그로 동작을 분기하지 않고 함수형 인터페이스를 넘겨줘서 동작을 달리해보았다.

```java
interface PrintPredicate {
    String print(Apple apple);
}

class PrintWeightPredicate implements PrintPredicate {

    @Override
    public String print(Apple apple) {
        return Integer.toString(apple.getWeight());
    }
}

class PrintHeavyLightPredicate implements PrintPredicate {

    int middleWeight = 20;
    static final String APPLE_HEAVY = "heavy";
    static final String APPLE_LIGHT = "light";

    @Override
    public String print(Apple apple) {
        if(apple.getWeight() > middleWeight) {
            return APPLE_HEAVY;
        }

        return APPLE_LIGHT;
    }
}

public class Quiz2Dash1 {

    public static void prettyPrintApple(List<Apple> inventory, PrintPredicate p) {

        for(Apple apple : inventory) {
            String output = p.print(apple);
            System.out.println(output);
        }
    }

    public static void main(String[] args) {
        Apple one = new Apple(Color.GREEN, 100);
        Apple two = new Apple(Color.RED, 20);
        Apple three = new Apple(Color.RED, 10);

        List<Apple> apples = Arrays.asList(one, two, three);

        prettyPrintApple(apples, new PrintHeavyLightPredicate());
        prettyPrintApple(apples, new PrintWeightPredicate());

        String test = "test";
    }
}
```

 

1. 일단 오직 하나의 추상 메서드만 있는 인터페이스(함수형 인터페이스)를 선언한다
2. 각자 요구 사항에 맞춰 인터페이스를 구현한 클래스들을 만든다
3. 이 인터페이스를 파라메터로 (동작 파라메터) 받는 메서드를 만든다
4. 실제로 실행 단에서 이 메소드를 호출하며 동시에 동작을 담고 있는 클래스를 던져준다. 

대표적인 함수형 인터페이스로는 정렬을 하는 Comparator의 sort, 쓰레드를 이용해서 코드 블록을 실행하는 Runnable의 run, 메소드를 호출하는 Callable의 call이 있다. 

> 이런 형태를 전략 디자인 패턴 Strategy design pattern 이라고 한다.

---

전략 디자인 패턴은 각 알고리즘을 캡슐화하는 알고리즘 패밀리(구현)들을 정의해둔 다음에 런타임에 알고리즘을 선택하는 기법이다.  예제에서는 컬렉션 탐색 로직과 적용할 동작을 분리했다! 이렇게 하면 한 메서드가 다른 동작을 수행하도록 재활용을 할 수 있다. → 캡슐화

## 3) 익명 클래스를 이용

아무래도 위의 방법은 인터페이스를 만들고 구현하는 등 자질구레한 일들이 굉장히 많아서 귀찮다! 이를 조금이라도 줄이고자 자바는 클래스 선언과 인스턴스화를 동시에 수행하는 익명 클래스를 만들었다. 

```java
// 익명 클래스로 만들어보기
        prettyPrintApple(apples, new PrintPredicate() {
            @Override
            public String print(Apple apple) {
                return Integer.toString(apple.getWeight());
            }
        });

        prettyPrintApple(apples, new PrintPredicate() {

            int middleWeight = 20;
            static final String APPLE_HEAVY = "heavy";
            static final String APPLE_LIGHT = "light";

            @Override
            public String print(Apple apple) {
                if(apple.getWeight() > middleWeight) {
                    return APPLE_HEAVY;
                }

                return APPLE_LIGHT;
            }
        });
```

이렇게 하면 클래스들을 만들고 인스턴스로 만든 다음에 쓰는 과정을 확 줄일 수는 있는데 이렇게 해버리면 딱 한 번 쓰고 또 쓰려면 익명 클래스로 또 만들어줘야 해서 만약 반복 사용을 한다고 하면 좋은 방법은 아닌 것 같다. 그리고 익명 클래스의 형태가 익숙하지 않은 사람들도 많다. 

> 익명클래스는 자바의 local class와 비슷한 개념이다. 이름이 없는 클래스로, 이를 이용하면 클래스 선언과 인스턴스화를 동시에 할 수 있고 즉석에서 필요한 구현을 만들어 사용할 수 있다.

---

## 4) 람다 표현식 이용

```java
// 람다로 던져보기
        prettyPrintApple(apples, (Apple apple) ->
            Integer.toString(apple.getWeight())
        );

        prettyPrintApple(apples, (Apple apple) -> {

            int middleWeight = 20;
            String APPLE_HEAVY = "heavy";
            String APPLE_LIGHT = "light";

            if(apple.getWeight() > middleWeight) {
                return APPLE_HEAVY;
            }

            return APPLE_LIGHT;
        });
```

내가 만든 예제는 람다를 던져도 극단적으로 간단해 보이지는 않는데 람다를 사용하면 명시적으로 클래스를 안 만들어도 되기 때문에 훨씬 더 간단한 형태로 보인다. 

코드 전달 기법을 이용하면 동작을 메서드의 인수로 전달할 수 있다. 자바 8이전에는 이런 작업을 하고 싶다면 상당수의 코드가 추가되었다. 익명 클래스가 있다고 해도 인터페이스를 상속받아 여러 클래스를 구현해야 하는 수고는 여전했는데 람다로 이걸 해결했다.